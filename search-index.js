var searchIndex = {};
searchIndex["symbolic_expressions"] = {"doc":"symbolic-expressions parsing and generating library","items":[[3,"ParseError","symbolic_expressions","detailed symbolic-expression parse error information",null,null],[4,"Error","","Error type for symbolic-expressions",null,null],[13,"Other","","any other error type",0,null],[13,"Parse","","intended to give more detailed parser errrors, actually not used currently",0,null],[13,"Io","","IO error",0,null],[13,"FromUtf8","","UTF8 parsing error",0,null],[4,"Sexp","","a symbolic-expression\nCan be a string or a list or nothing",null,null],[13,"String","","plain String symbolic-expression",1,null],[13,"List","","list symbolic-expression",1,null],[13,"Empty","","empty, trivial symbolic-expression",1,null],[5,"str_error","","utility function that creates a symbolic-expressions Error Result from a String",null,{"inputs":[{"name":"string"}],"output":{"name":"result"}}],[5,"parse_error","","utility function that creates a symbolic-expressions Error Result for a parser error",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"string"}],"output":{"name":"result"}}],[5,"encode_string","","encode a string according to the guidelines given by Kicad",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"fmt","","",0,null],[11,"fmt","","",2,null],[11,"description","","",0,null],[11,"cause","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"new_empty","","create an empty symbolic-expression",1,{"inputs":[],"output":{"name":"sexp"}}],[11,"new_string","","create a String type symbolic-expression",1,{"inputs":[{"name":"t"}],"output":{"name":"sexp"}}],[11,"new_list","","create a list type symbolic-expression",1,{"inputs":[{"name":"vec"}],"output":{"name":"sexp"}}],[11,"new_named_list","","create a list type symbolic-expression where\nthe first element of the list is a string that indicates\nthe name, the remainder is filled in via the provided\nfill function",1,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"sexp"}}],[11,"new_named","","create a list type symbolic-expression where\nthe first element of the list is a string that indicates\nthe name",1,{"inputs":[{"name":"str"},{"name":"t"}],"output":{"name":"sexp"}}],[11,"new_named_sexp","","create a list type symbolic-expression where\nthe first element of the list is a string that indicates\nthe name, and the second is another symbolic-expression\ncreated via the IntoSexp trait",1,{"inputs":[{"name":"str"},{"name":"t"}],"output":{"name":"sexp"}}],[11,"take_list","","if the expression is a list, take out the list and swap it with Empty",1,null],[11,"take_string","","if the expression is a string, take it out and swap it with Empty",1,null],[11,"from","","create a symbolic-expression via the IntoSexp trait",1,{"inputs":[{"name":"t"}],"output":{"name":"sexp"}}],[11,"list","","access the symbolic-expression as if it is a List",1,null],[11,"string","","access the symbolic-expression as if it is a String",1,null],[11,"is_string","","is this expression a string",1,null],[11,"is_list","","is this expression a list",1,null],[11,"f","","access the symbolic-expression as if it is a String\nthat is a f64",1,null],[11,"i","","access the symbolic-expression as if it is a String\nthat is an i64",1,null],[11,"list_name","","access the symbolic-expression as if it is a List\nassuming the first element is a String and return that",1,null],[11,"slice_atom","","access the symbolic-expression as if it is a named List\nwhere the name is provided and returns the remaining elements\nafter the name as a slice",1,null],[11,"named_value","","access the symbolic-expression as if it is a named List\nwith two elements where the name is provided and returns\nthe next element in the list",1,null],[11,"named_value_i","","as named_value but converted to i64",1,null],[11,"named_value_f","","as named_value but converted to f64",1,null],[11,"named_value_string","","as named_value but converted to String",1,null],[11,"slice_atom_num","","get the symbolic-expression as a list which starts\nwith a string that indicates the name and has num more\nelements, returns those elements",1,null],[11,"fmt","","",1,null],[0,"parser","","symbolic-expression parser code: data -&gt; symbolic-expression",null,null],[5,"parse_str","symbolic_expressions::parser","parse a &amp;str to a symbolic-expression",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_file","","parse a file as a symbolic-expression",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"ser","symbolic_expressions","symbolic-expression serialization code: symbolic-expression -&gt; data",null,null],[5,"to_writer","symbolic_expressions::ser","serialize a symbolic-expression to a Writer",null,{"inputs":[{"name":"w"},{"name":"sexp"}],"output":{"name":"result"}}],[5,"to_writer_with_formatter","","serialize a symbolic-expression to a Writer using a Formatter",null,{"inputs":[{"name":"w"},{"name":"f"},{"name":"sexp"}],"output":{"name":"result"}}],[5,"to_writer_with_rules","","serialize a symbolic-expression to a Writer using a Rules Formatter",null,{"inputs":[{"name":"w"},{"name":"rules"},{"name":"sexp"}],"output":{"name":"result"}}],[5,"to_vec","","serialize a symbolic-expression to a Vec&lt;u8&gt;",null,{"inputs":[{"name":"sexp"}],"output":{"name":"result"}}],[5,"to_vec_with_rules","","serialize a symbolic-expression to a Vec&lt;u8&gt; using Rules",null,{"inputs":[{"name":"sexp"},{"name":"rules"}],"output":{"name":"result"}}],[5,"to_vec_with_formatter","","serialize a symbolic-expression to a Vec&lt;u8&gt; using a Formatter",null,{"inputs":[{"name":"sexp"},{"name":"f"}],"output":{"name":"result"}}],[5,"to_string","","serialize a symbolic-expression to a String",null,{"inputs":[{"name":"sexp"}],"output":{"name":"result"}}],[5,"to_string_with_rules","","serialize a symbolic-expression to a String using Rules",null,{"inputs":[{"name":"sexp"},{"name":"rules"}],"output":{"name":"result"}}],[5,"to_string_with_formatter","","serialize a symbolic-expression to a String using a Formatter",null,{"inputs":[{"name":"sexp"},{"name":"f"}],"output":{"name":"result"}}],[6,"Result","symbolic_expressions","symbolic-expressions Result type",null,null],[6,"Rules","","datatype used by the example Formatter RulesFormatter",null,null],[8,"IntoSexp","","like Into trait but works from a ref avoiding consumption or expensive clone",null,null],[10,"into_sexp","","convert self into a Sexp",3,null],[8,"Formatter","","trait for formatting the serialization of a symbolic-expression",null,null],[10,"open","","Called when serializing a &#39;(&#39;.",4,null],[10,"element","","Called when serializing a &#39; VAL&#39;.",4,null],[10,"close","","Called when serializing a &#39;)&#39;.",4,null]],"paths":[[4,"Error"],[4,"Sexp"],[3,"ParseError"],[8,"IntoSexp"],[8,"Formatter"]]};
initSearch(searchIndex);
